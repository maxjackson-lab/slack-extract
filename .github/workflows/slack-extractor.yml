name: Slack Data Extractor & Analyzer

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC
  workflow_dispatch:  # Manual trigger

jobs:
  extract-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Create exports directory
      run: mkdir -p exports
      
    - name: Run Slack Extractor and Unified Analysis
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_WORKSPACE_ID: ${{ secrets.SLACK_WORKSPACE_ID }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GAMMA_API_KEY: ${{ secrets.GAMMA_API_KEY }}
        LOG_LEVEL: info
      run: |
        echo "📊 Running Slack Extractor and Unified Analysis..."
        # Run the main application with --once flag to extract data and then run analysis
        node dist/index.js --once
      continue-on-error: true
      
    - name: Upload Analysis Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: slack-analysis-${{ github.run_number }}-${{ github.run_id }}
        path: |
          exports/*.csv
          exports/*.md
          exports/*.json
        retention-days: 90
        if-no-files-found: warn
        
    - name: Create Analysis Summary
      if: always()
      run: |
        echo "## 📊 Weekly Slack Analysis Report" > analysis-summary.md
        echo "" >> analysis-summary.md
        echo "**Run Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> analysis-summary.md
        echo "**Workflow:** ${{ github.workflow }}" >> analysis-summary.md
        echo "**Run ID:** ${{ github.run_id }}" >> analysis-summary.md
        echo "" >> analysis-summary.md
        
        if [ -f "exports/analysis-summary.json" ]; then
          echo "### Analysis Results" >> analysis-summary.md
          echo "" >> analysis-summary.md
          echo "- **Messages Analyzed:** $(jq -r '.totalMessages' exports/analysis-summary.json)" >> analysis-summary.md
          echo "- **Tokens Used:** $(jq -r '.tokensUsed' exports/analysis-summary.json)" >> analysis-summary.md
          echo "- **Presentation URL:** $(jq -r '.presentationUrl' exports/analysis-summary.json)" >> analysis-summary.md
          echo "- **Report File:** $(jq -r '.markdownFile' exports/analysis-summary.json)" >> analysis-summary.md
        fi
        
        echo "" >> analysis-summary.md
        echo "### Artifacts" >> analysis-summary.md
        echo "" >> analysis-summary.md
        echo "Download the complete analysis from the **Artifacts** section above." >> analysis-summary.md
        echo "" >> analysis-summary.md
        echo "---" >> analysis-summary.md
        echo "*Generated by GitHub Actions*" >> analysis-summary.md
        
    - name: Upload Summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-summary-${{ github.run_number }}
        path: analysis-summary.md
        retention-days: 30
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            let comment = '## 📊 Slack Analysis Results\\n\\n';
            
            if (fs.existsSync('./exports/analysis-summary.json')) {
              const summary = JSON.parse(fs.readFileSync('./exports/analysis-summary.json', 'utf8'));
              comment += `✅ **Unified Analysis Complete**\\n`;
              comment += `- Messages: ${summary.totalMessages}\\n`;
              comment += `- Tokens: ${summary.tokensUsed}\\n`;
              comment += `- Presentation: ${summary.presentationUrl}\\n`;
            }
            
            if (fs.existsSync('./exports')) {
              const files = fs.readdirSync('./exports');
              const csvFiles = files.filter(f => f.endsWith('.csv'));
              const mdFiles = files.filter(f => f.endsWith('.md'));
              
              if (csvFiles.length > 0) {
                comment += `\\n📊 **CSV Files:** ${csvFiles.length}\\n`;
                csvFiles.forEach(file => {
                  const stats = fs.statSync(path.join('./exports', file));
                  comment += `- \`${file}\` (${(stats.size / 1024).toFixed(1)} KB)\\n`;
                });
              }
              
              if (mdFiles.length > 0) {
                comment += `\\n📝 **Analysis Reports:** ${mdFiles.length}\\n`;
                mdFiles.forEach(file => {
                  comment += `- \`${file}\`\\n`;
                });
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create PR comment:', error.message);
          }