name: Slack Data Extractor & Analyzer

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC
  workflow_dispatch:  # Manual trigger

jobs:
  extract-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: npm run build
      
    - name: Create exports directory
      run: mkdir -p exports
      
    - name: Run Slack Extractor
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_WORKSPACE_ID: ${{ secrets.SLACK_WORKSPACE_ID }}
        DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        DROPBOX_CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
        DROPBOX_CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
        DROPBOX_FOLDER_PATH: ${{ secrets.DROPBOX_FOLDER_PATH }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GAMMA_API_KEY: ${{ secrets.GAMMA_API_KEY }}
        SCHEDULE_ENABLED: false
        RUN_IMMEDIATELY: true
        LOG_LEVEL: info
      run: node dist/index.js --once
      
    - name: Run Analysis (if API keys available)
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_WORKSPACE_ID: ${{ secrets.SLACK_WORKSPACE_ID }}
        DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
        DROPBOX_CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
        DROPBOX_CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
        DROPBOX_FOLDER_PATH: ${{ secrets.DROPBOX_FOLDER_PATH }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GAMMA_API_KEY: ${{ secrets.GAMMA_API_KEY }}
        SCHEDULE_ENABLED: false
        RUN_IMMEDIATELY: true
        LOG_LEVEL: info
      run: |
        if [ -n "$OPENAI_API_KEY" ] && [ -n "$GAMMA_API_KEY" ]; then
          echo "üß† Running GPT-4o analysis and generating presentation..."
          echo "2" | node dist/index.js --interactive
        else
          echo "‚ÑπÔ∏è Skipping analysis - API keys not configured"
        fi
      continue-on-error: true
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: slack-data-export-${{ github.run_number }}
        path: exports/
        retention-days: 30
        if-no-files-found: warn
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const exportsDir = './exports';
            if (fs.existsSync(exportsDir)) {
              const files = fs.readdirSync(exportsDir);
              const csvFiles = files.filter(f => f.endsWith('.csv'));
              const mdFiles = files.filter(f => f.endsWith('.md'));
              
              let comment = '## üìä Slack Data Export Results\n\n';
              
              if (csvFiles.length > 0) {
                comment += `‚úÖ **CSV Export**: ${csvFiles.length} file(s) generated\n`;
                csvFiles.forEach(file => {
                  const stats = fs.statSync(path.join(exportsDir, file));
                  comment += `- \`${file}\` (${(stats.size / 1024).toFixed(1)} KB)\n`;
                });
              }
              
              if (mdFiles.length > 0) {
                comment += `\nüìù **Analysis Report**: ${mdFiles.length} file(s) generated\n`;
                mdFiles.forEach(file => {
                  comment += `- \`${file}\`\n`;
                });
              }
              
              if (csvFiles.length === 0 && mdFiles.length === 0) {
                comment += '‚ö†Ô∏è No files were generated. Check the logs for errors.';
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not create PR comment:', error.message);
          }